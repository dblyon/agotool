[uwsgi]
master-fifo = ago_UP_master.fifo

;; attach to zerg
socket = app.sock
zerg = zerg.sock
; Fallback if a zerg server is not available
; By default a Zerg client will not run if the Zerg server is not available. Thus, if your zerg server dies, and you reload the zerg client, it will simply shutdown.
; If you want to avoid that behaviour, add a --socket directive mapping to the required socket (the one that should be managed by the zerg server) and add the --zerg-fallback option.
; With this setup, if a Zerg server is not available, the Zerg client will continue binding normally to the specified socket(s).
zerg-fallback = true

master = true ; false makes sense for debugging with e.g. Valgrind
strict = true ; Fail if unknown config parameter found
enable-threads = false ; Python threads not allowed (don't need them)
vacuum = false ; delete sockets during shutdown. Cleanup after yourself
single-interpreter = true ; single python interpreter per worker instance
die-on-term = true ; Shutdown when receiving SIGTERM
need-app = true ; Fail to start if application cannot load
lazy-apps = true ; loads your application one time per worker. thereby forking is disabled. false in zerg mode, but true with chain-reloading!

;; aGOtool settings
wsgi-file = runserver.py
callable = app
stats = stats.sock
memory-report = true
;; Aquarius /etc/nginx/sites-enabled/agotool.org.conf
auto-procname = true ; give processes names (master and worker)
;; prepend a useful name to the processes (can be seen in htop, but top doesn't show it)
procname-prefix = ago_UP_vassal_

;; Logging
; disable-logging = true ; uWSGI logging is too verbose
; log-4xx = true ; but we want to see critical errors
; log-5xx = true ; but we want to see critical errors
;; on if not debug
; req-logger = log_uwsgi_requests.log
;; on if not debug
; logger = file:log_uwsgi_error.txt
; To log to files instead of stdout/stderr and to simultaneously daemonize uWSGI.
daemonize = log_vassal.log
safe-pidfile = pid_vassal.pid

;; Buffer size
buffer-size = 32768

;; When to restart workers
max-requests = 80000 ; Restart workers after this many requests (STRING_v11: 80000)
; max-requests-delta = 5000 ; add (worker_id * delta) to the max_requests value of each worker --> for whatever reason setting not recognized
max-worker-lifetime = 604800 ; Restart workers after this many seconds (604800 --> 24*7*60*60, once per week).

;; Dynamic worker scaling
cheaper-algo = busyness
processes = 4 ; Maximum number of workers allowed
cheaper = 1 ; Minimum number of workers allowed
cheaper-initial = 1 ; Workers created at startup
cheaper-overload = 20 ; Length of a cycle in seconds
cheaper-step = 1 ; How many workers to spawn at a time
cheaper-busyness-multiplier = 60 ; How many cycles to wait before killing workers
cheaper-busyness-min = 20 ; Below this threshold, kill workers (if stable for multiplier cycles).
cheaper-busyness-max = 70 ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 40 ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2 ; How many emergency workers to create if there are too many requests in the queue
harakiri = 60 ; Number of seconds after which "stuck worker" will get destroyed

;; uwsgitop interpretation
;WID -> worker id
;% -> percentage of served requests by the worker
;PID -> process id of the worker
;REQ -> number of managed requests
;RPS -> number of current requests handled per second
;EXC -> number of raised exceptions
;SIG -> number of managed uwsgi signals (NOT unix signals !!!)
;STATUS -> can be idle, busy, pause, cheaped or sig
;AVG -> average response time for the worker
;RSS -> RSS memory (need --memory-report)
;VSZ -> address space (need --memory-report)
;TX -> transmitted data
;RunT -> running time


;; FIFO Available commands
;‘0’ to ‘9’ - set the fifo slot (see below)
;‘+’ - increase the number of workers when in cheaper mode (add --cheaper-algo manual for full control)
;‘-‘ - decrease the number of workers when in cheaper mode (add --cheaper-algo manual for full control)
;‘B’ - ask Emperor for reinforcement (broodlord mode, requires uWSGI >= 2.0.7)
;‘C’ - set cheap mode
;‘c’ - trigger chain reload
;‘E’ - trigger an Emperor rescan
;‘f’ - re-fork the master (dangerous, but very powerful)
;‘l’ - reopen log file (need –log-master and –logto/–logto2)
;‘L’ - trigger log rotation (need –log-master and –logto/–logto2)
;‘p’ - pause/resume the instance
;‘P’ - update pidfiles (can be useful after master re-fork)
;‘Q’ - brutally shutdown the instance
;‘q’ - gracefully shutdown the instance
;‘R’ - send brutal reload
;‘r’ - send graceful reload
;‘S’ - block/unblock subscriptions
;‘s’ - print stats in the logs
;‘W’ - brutally reload workers
;‘w’ - gracefully reload workers